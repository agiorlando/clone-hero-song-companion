name: Build and Release

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: mac

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Prepare build environment (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1 libasound2-dev

      - name: Prepare build environment (macOS)
        if: matrix.platform == 'mac'
        run: |
          # Install any macOS-specific dependencies if needed
          echo "Preparing macOS build environment"

      - name: Build Electron app (Linux)
        if: matrix.platform == 'linux'
        shell: bash
        run: npm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Windows)
        if: matrix.platform == 'win'
        shell: bash
        run: |
          echo "Building Windows app..."
          npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (macOS)
        if: matrix.platform == 'mac'
        shell: bash
        run: |
          npm run build
          # Build x64 and ARM64 separately to avoid universal binary issues with active-win
          echo "Building macOS x64..."
          npm run build:mac-x64
          echo "Building macOS ARM64..."
          npm run build:mac-arm64
          # Post-build: Sign the builds
          echo "Signing macOS builds..."
          for APP_PATH in $(find release -name "*.app" -type d); do
            if [ -n "$APP_PATH" ]; then
              echo "Found app at: $APP_PATH"
              # Remove any problematic attributes
              sudo xattr -cr "$APP_PATH" || true
              # Sign with ad-hoc signature
              codesign --force --deep --sign - "$APP_PATH" || echo "Signing failed, continuing..."
              # Verify the signature
              codesign --verify --verbose "$APP_PATH" || echo "Verification failed, but may still work"
            fi
          done
          echo "âœ… macOS builds completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List release files
        shell: bash
        run: |
          echo "Contents of release directory:"
          ls -la release/ || echo "No release directory found"
          echo "Current working directory:"
          pwd
          echo "All files in current directory:"
          ls -la

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        if: hashFiles('release/*') != ''
        with:
          files: release/*
          token: ${{ secrets.GITHUB_TOKEN }}
